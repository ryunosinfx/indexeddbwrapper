{"version":3,"sources":["webpack://indexeddbwrapper/webpack/bootstrap","webpack://indexeddbwrapper/./src/constant.js","webpack://indexeddbwrapper/./src/idbUtil.js","webpack://indexeddbwrapper/./src/indexeddbCore.js","webpack://indexeddbwrapper/./src/indexeddbHelper.js","webpack://indexeddbwrapper/./src/indexeddbAccessor.js","webpack://indexeddbwrapper/./src/indexeddbWrapper.js","webpack://indexeddbwrapper/./test/testUtil.js","webpack://indexeddbwrapper/./index.js","webpack://indexeddbwrapper/./test/test.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","dbName","ua","navigator","userAgent","replace","domain","window","location","keypathName","IdbUtil","table","tabels","condetions","Array","isArray","condition","isMutch","start","end","isNotEqualStart","isNotEqualEnd","undefined","IDBKeyRange","bound","upperBound","KeyRange","lowerBound","only","key1","key2","key3","key4","key5","array","push","split","join","MODE_R","MODE_RW","this","indexedDB","keyPathMap","db","lastVersion","isUpdateOpen","timer","isDBClosed","tableCache","newVersion","Promise","resolve","reject","close","request","open","onsuccess","event","target","result","onupgradeneeded","onabort","e","onerror","clearTimeout","setTimeout","keys","tableName","index","data","elm","byteLength","tables","cacheClear","transaction","oncomplete","closeDB","objectStore","callerName","console","error","stack","log","message","Error","keyPathName","getOpenDB","catch","throwNewError","getObjectStore","keyPathNameCurrent","keyPath","version","payload","range","_selectAll","direction","offset","count","callback","_selectAllExecute","isGetFirstOne","isValidCallBack","isOnLimit","endCount","list","rowCount","req","openCursor","cursor","continue","_selectByKey","_selectByKeyOnTran","cachekey","cache","getCache","setCache","_selectByKeys","_selectByKeysOnTran","_selectByKeysOnTranExec","retMap","_getByKeyFromeObjectStore","_selectFirstOne","getKeyPathByMap","_insertUpdate","recoord","record","dataList","currentTables","dataMap","_bulkUpdateExecute","_bulkInsertExecute","promises","promise","_bulkInsertExecuteOne","all","objectStoreRequest","add","_bulkUpdateExecuteOne","put","_insertExecute","_updateExecute","_deleteWithRange","_deleteWithRangeExecute","or","delete","_delete","keyPathValue","_deleteOnTran","_truncate","_truncateExecute","clear","names","objectStoreNames","isExist","isMultiEntry","_createIndex","indexName","createIndex","multiEntry","indexNames","includes","deleteIndex","isAutoIncrement","_createStore","isExistsObjectStore","getCurrentVersion","createObjectStore","_dropStore","deleteObjectStore","cmdSelectAll","cmdSelectByKey","cmdSelectByKeys","cmdSelectFirstOne","cmdBulkInsertUpdate","cmdInsertUpdate","cmdDeleteWithRange","cmdDelete","cmdTruncate","cmdCreateStore","cmdDeleteStore","cmdCreateIndex","cmdDeleteIndex","cmdGetObjectStoreNames","core","queue","lastTaskMode","lastLockTime","Date","getTime","counter","async","deQueue","deQueueExec","length","selectTasks","task","shift","then","results","taskOfRead","splice","executUpdateTask","alert","execCmd","cmd","updateTask","enQueueTask","limmitCount","_bulkInsertUpdate","_deleteStore","isMultiColumns","_deleteIndex","getObjectStoreNames","slice","String","fromCharCode","charCodeAt","str","nextStr","enQueueReadTask","enQueueWriteTask","constant","idbHelperMap","Map","objectStoreName","isAutoincrements","currentDbName","has","idbh","set","dbNameNew","keypathNamee","inst","init","reslve","createStore","putRecord","storeData","insertUpdate","selectByKeys","selectByKey","recordAsDefaultLoad","getRecord","selectAll","idbAccessors","obName","accessor","TestUtil","msg","frame","document","createElement","titleRow","title","hr","textContent","appendChild","currentFrame","time","now","titleText","level","row","duration","substring","getDuration","indexedbwrapper","test","logger","getObAccessor"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dest/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const ua = navigator.userAgent.replace(/[\\.0-9]+/g, 'x');\nconst domain = window.location;\nexport default {\n\tdbName: 'IDBWrapper',\n\tua: ua,\n\tdomain: domain,\n\tkeypathName: 'pk'\n};\n","export class IdbUtil {\n\tstatic currentTables(table, tabels) {\n\t\treturn tabels ? tabels : [table];\n\t}\n\t// static async getTransaction(db,tables,mode,reject,reject){\n\t//   let transaction = db.transaction(tables, mode);\n\t//   transaction.oncomplete = (event) => {\n\t//     db.close();\n\t//     resolve();\n\t//   };\n\t//   transaction.onerror = (event) => {\n\t//     db.close();\n\t//     reject();\n\t//   };\n\t// }\n\n\t//private\n\tstatic isMutch(value, condetions) {\n\t\tif (condetions === undefined || condetions === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (Array.isArray(condetions)) {\n\t\t\tfor (let condition of condetions) {\n\t\t\t\tif (IdbUtil.isMutch(value, condition)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (let key in condetions) {\n\t\t\t\tlet condition = condetions[key];\n\t\t\t\tif (typeof condition === 'object') {\n\t\t\t\t\tif (IdbUtil.isMutch(value, condition)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet target = value[key];\n\t\t\t\t\tif (target !== condition) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\tstatic makeKeyRange(start, end, isNotEqualStart, isNotEqualEnd) {\n\t\treturn isNotEqualStart === undefined && isNotEqualEnd === undefined ? IDBKeyRange.bound(start, end, false, false) : IDBKeyRange.bound(start, end, isNotEqualStart, isNotEqualEnd);\n\t}\n\tstatic makeKeyRangeUpper(start, isNotEqualStart) {\n\t\treturn isNotEqualStart !== true ? IDBKeyRange.upperBound(start) : IDBKeyRange.upperBound(start, isNotEqualStart);\n\t}\n\tstatic makeKeyRangeLower(end, isNotEqualEnd) {\n\t\treturn isNotEqualStart !== true ? KeyRange.lowerBound(end) : IDBKeyRange.lowerBound(end, isNotEqualEnd);\n\t}\n\tstatic makeKeyRangeOnly(only) {\n\t\treturn isNotEqualStart !== true ? IDBKeyRange.only(only) : IDBKeyRange.lowerBound(end, isNotEqualEnd);\n\t}\n\t//IDを生成\n\tstatic buildKeyPath(key1, key2, key3, key4, key5) {\n\t\tlet array = [];\n\t\tif (key1 !== undefined) {\n\t\t\tarray.push(\n\t\t\t\t(key1 + '')\n\t\t\t\t\t.split('&')\n\t\t\t\t\t.join('&amp;')\n\t\t\t\t\t.split('.')\n\t\t\t\t\t.join('&#046;')\n\t\t\t);\n\t\t}\n\t\tif (key2 !== undefined) {\n\t\t\tarray.push(\n\t\t\t\t(key2 + '')\n\t\t\t\t\t.split('&')\n\t\t\t\t\t.join('&amp;')\n\t\t\t\t\t.split('.')\n\t\t\t\t\t.join('&#046;')\n\t\t\t);\n\t\t}\n\t\tif (key3 !== undefined) {\n\t\t\tarray.push(\n\t\t\t\t(key3 + '')\n\t\t\t\t\t.split('&')\n\t\t\t\t\t.join('&amp;')\n\t\t\t\t\t.split('.')\n\t\t\t\t\t.join('&#046;')\n\t\t\t);\n\t\t}\n\t\tif (key4 !== undefined) {\n\t\t\tarray.push(\n\t\t\t\t(key4 + '')\n\t\t\t\t\t.split('&')\n\t\t\t\t\t.join('&amp;')\n\t\t\t\t\t.split('.')\n\t\t\t\t\t.join('&#046;')\n\t\t\t);\n\t\t}\n\t\tif (key5 !== undefined) {\n\t\t\tarray.push(\n\t\t\t\t(key5 + '')\n\t\t\t\t\t.split('&')\n\t\t\t\t\t.join('&amp;')\n\t\t\t\t\t.split('.')\n\t\t\t\t\t.join('&#046;')\n\t\t\t);\n\t\t}\n\t\treturn array.join('');\n\t}\n}\n","import { IdbUtil } from './idbUtil';\nconst MODE_R = 'readonly';\nconst MODE_RW = 'readwrite';\nexport class IndexeddbCore {\n\tconstructor(dbName) {\n\t\tthis.IDBKeyRange = window.IDBKeyRange;\n\t\tthis.indexedDB = window.indexedDB;\n\t\tthis.dbName = dbName;\n\t\tthis.keyPathMap = {};\n\t\tthis.db = null;\n\t\tthis.lastVersion = null;\n\t\tthis.isUpdateOpen = false;\n\t\tthis.timer = null;\n\t\tthis.isDBClosed = true;\n\t\tthis.tableCache = {};\n\t}\n\n\tgetOpenDB(newVersion) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastVersion = newVersion;\n\t\t\tif (this.lastVersion && this.db) {\n\t\t\t\tthis.db.close();\n\t\t\t\tthis.isUpdateOpen = true;\n\t\t\t\t// this.cacheClear();\n\t\t\t} else if (this.db && this.isDBClosed === false) {\n\t\t\t\tresolve(this.db);\n\t\t\t\treturn;\n\t\t\t} else if (this.lastVersion) {\n\t\t\t\tthis.isUpdateOpen = true;\n\t\t\t} else {\n\t\t\t\tthis.isUpdateOpen = false;\n\t\t\t}\n\t\t\t// TODO instance\n\t\t\tlet request = this.indexedDB.open(this.dbName, newVersion);\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tthis.db = event.target.result;\n\t\t\t\tthis.isDBClosed = false;\n\t\t\t\tresolve(this.db);\n\t\t\t};\n\t\t\trequest.onupgradeneeded = event => {\n\t\t\t\tthis.db = event.target.result;\n\t\t\t\tthis.isDBClosed = false;\n\t\t\t\tresolve(this.db);\n\t\t\t};\n\t\t\trequest.onabort = e => {\n\t\t\t\tresolve(e);\n\t\t\t};\n\t\t\trequest.onerror = e => {\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\tcloseDB() {\n\t\tif (this.isUpdateOpen) {\n\t\t\tthis.db.close();\n\t\t\tthis.isDBClosed = true;\n\t\t} else {\n\t\t\tif (this.timer) {\n\t\t\t\tclearTimeout(this.timer);\n\t\t\t}\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tthis.db.close();\n\t\t\t\tthis.isDBClosed = true;\n\t\t\t}, 1000);\n\t\t}\n\t}\n\tcacheClear() {\n\t\tconst keys = [];\n\t\tfor (let tableName in this.tableCache) {\n\t\t\tkeys.push(tableName);\n\t\t}\n\t\tfor (let tableName of keys) {\n\t\t\tconst tableCache = this.tableCache[tableName];\n\t\t\tfor (let index in tableCache) {\n\t\t\t\tdelete tableCache[index];\n\t\t\t}\n\t\t}\n\t}\n\tsetCache(tableName, key, value) {\n\t\tif (!value || !value.data) {\n\t\t\treturn;\n\t\t}\n\t\tconst data = value.data;\n\t\tfor (let key in data) {\n\t\t\tconst elm = data[key];\n\t\t\tif (elm && elm.byteLength) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (!this.tableCache[tableName]) {\n\t\t\tthis.tableCache[tableName] = {};\n\t\t}\n\t\tthis.tableCache[tableName][key] = value;\n\t}\n\tgetCache(tableName, key) {\n\t\tconst tableCache = this.tableCache[tableName];\n\t\treturn tableCache ? tableCache[key] : null;\n\t}\n\tgetObjectStore(db, tableName, tables, mode) {\n\t\tif (mode === MODE_R) {\n\t\t\tthis.cacheClear();\n\t\t}\n\t\tlet transaction = db.transaction(tables, mode);\n\t\ttransaction.oncomplete = event => {\n\t\t\tthis.closeDB();\n\t\t};\n\t\ttransaction.onerror = event => {\n\t\t\tthis.closeDB();\n\t\t};\n\t\tconst table = transaction.objectStore(tableName);\n\t\treturn table;\n\t}\n\tthrowNewError(callerName) {\n\t\treturn e => {\n\t\t\tconsole.error(e);\n\t\t\tif (e.stack) {\n\t\t\t\tconsole.log(e.stack);\n\t\t\t} else {\n\t\t\t\tconsole.log(e.message, e);\n\t\t\t}\n\t\t\tconsole.error(callerName ? callerName : '' + '/' + e);\n\t\t\tthrow new Error(e);\n\t\t};\n\t}\n\tgetKeyPathByMap(tableName) {\n\t\treturn this.keyPathMap[tableName];\n\t}\n\tasync getKeyPath(tableName) {\n\t\tlet keyPathName = this.keyPathMap[tableName];\n\t\tif (keyPathName !== undefined && keyPathName !== null) {\n\t\t\treturn keyPathName;\n\t\t}\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('getKeyPath->getOpenDB'));\n\t\tlet objectStore = this.getObjectStore(db, tableName, [tableName], MODE_R);\n\t\tthis.closeDB();\n\t\tlet keyPathNameCurrent = objectStore.keyPath;\n\t\tthis.keyPathMap[tableName] = keyPathNameCurrent;\n\t\treturn keyPathNameCurrent;\n\t}\n\t//private\n\tasync getCurrentVersion() {\n\t\tlet db = await this.getOpenDB().catch(this.throwNewError('getCurrentVersion->getOpenDB'));\n\t\tconst version = db.version;\n\t\tthis.closeDB();\n\t\treturn version;\n\t}\n\t//public\n\tasync selectAll(payload) {\n\t\tlet { tableName, range, condetions } = payload;\n\t\treturn await this._selectAll(tableName, range, condetions);\n\t}\n\t//Select In-line-Keyで返す。\n\tasync _selectAll(tableName, range, direction, offset, count, callback) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_selectAll->getOpenDB tableName:' + tableName));\n\t\tlet objectStore = this.getObjectStore(db, tableName, [tableName], MODE_R);\n\t\treturn await this._selectAllExecute(objectStore, range, false, offset, count, callback);\n\t}\n\t_selectAllExecute(objectStore, range, isGetFirstOne, offset, count, callback) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst isValidCallBack = typeof offset === 'function';\n\t\t\tconst isOnLimit = typeof offset === 'number' && typeof count === 'number' && offset > 0 && count > 0;\n\t\t\tconst endCount = offset + count;\n\t\t\tconst list = [];\n\t\t\tlet rowCount = 0;\n\t\t\tlet req = range === undefined ? objectStore.openCursor() : objectStore.openCursor(range);\n\t\t\treq.onsuccess = event => {\n\t\t\t\tlet cursor = event.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst value = cursor.value;\n\t\t\t\t\tif (isValidCallBack && !callback(value)) {\n\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (isOnLimit) {\n\t\t\t\t\t\tif (offset > rowCount) {\n\t\t\t\t\t\t\trowCount++;\n\t\t\t\t\t\t\tcursor.continue();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (endCount < rowCount) {\n\t\t\t\t\t\t\tresolve(list);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(cursor.value)\n\t\t\t\t\tlist.push(value);\n\t\t\t\t\tif (isGetFirstOne) {\n\t\t\t\t\t\tresolve(list[0]);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\trowCount++;\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(list);\n\t\t\t\t}\n\t\t\t};\n\t\t\treq.onerror = e => {\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\t//public\n\tasync selectByKey(payload) {\n\t\tlet { tableName, key } = payload;\n\t\treturn await this._selectByKey(tableName, key);\n\t}\n\t//Select In-line-return promise;Keyで返す。\n\tasync _selectByKey(tableName, key) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_selectByKey->getOpenDB tableName:' + tableName));\n\t\t// console.log(\"_selectByKey tableName:\" + tableName + \"/pk:\" + key);\n\t\t// console.log(key);\n\t\treturn await this._selectByKeyOnTran(db, tableName, key).catch(this.throwNewError('_selectByKey->_selectByKeyOnTran tableName:' + tableName + '/mode:' + MODE_R));\n\t}\n\t_selectByKeyOnTran(db, tableName, key, tables, mode = MODE_R) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cachekey = tableName + '_' + mode;\n\t\t\tconst cache = this.getCache(cachekey, key);\n\t\t\tif (cache) {\n\t\t\t\tresolve(cache);\n\t\t\t} else {\n\t\t\t\tlet objectStore = this.getObjectStore(db, tableName, [tableName], mode);\n\t\t\t\tlet request = objectStore.get(key); //keyはsonomama\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\tconst result = request.result;\n\t\t\t\t\tresolve(result);\n\t\t\t\t\tthis.setCache(cachekey, key, result);\n\t\t\t\t};\n\t\t\t\trequest.onerror = e => {\n\t\t\t\t\treject(e);\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\t//public\n\tasync selectByKeys(payload) {\n\t\tlet { tableName, keys } = payload;\n\t\treturn await this._selectByKeys(tableName, keys);\n\t}\n\t//Select In-line-return promise;Keyで返す。\n\tasync _selectByKeys(tableName, keys) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_selectByKeys->getOpenDB tableName:' + tableName));\n\t\treturn await this._selectByKeysOnTran(db, tableName, keys).catch(this.throwNewError('_selectByKeys->_selectByKeyOnTran tableName:' + tableName));\n\t}\n\tasync _selectByKeysOnTran(db, tableName, keys, tables) {\n\t\tlet objectStore = this.getObjectStore(db, tableName, [tableName], MODE_R);\n\t\treturn await this._selectByKeysOnTranExec(objectStore, keys, tableName);\n\t}\n\tasync _selectByKeysOnTranExec(objectStore, keys, tableName) {\n\t\tconst retMap = {};\n\t\tfor (let key of keys) {\n\t\t\tconst cache = this.getCache(tableName, key);\n\t\t\tconst result = cache ? cache : await this._getByKeyFromeObjectStore(objectStore, key);\n\t\t\tif (!cache) {\n\t\t\t\tthis.setCache(tableName, key, result);\n\t\t\t}\n\t\t\tretMap[key] = result;\n\t\t}\n\t\treturn retMap;\n\t}\n\t_getByKeyFromeObjectStore(objectStore, key) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!key) {\n\t\t\t\tresolve(null);\n\t\t\t}\n\t\t\tlet request = objectStore.get(key); //keyはsonomama\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tresolve(request.result);\n\t\t\t};\n\t\t\trequest.onerror = e => {\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\t//public\n\tasync selectFirstOne(payload) {\n\t\tlet { tableName, range, direction } = payload;\n\t\treturn await this._selectFirstOne(tableName, range, direction);\n\t}\n\t//Select FirstOnek\n\tasync _selectFirstOne(tableName, range, direction) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_selectFirstOne->getOpenDB tableName:' + tableName));\n\t\tlet objectStore = this.getObjectStore(db, tableName, [tableName], MODE_R);\n\t\treturn await this._selectAllExecute(objectStore, range, true);\n\t}\n\n\t//InsertUpdate\n\tasync insertUpdate(payload) {\n\t\tlet { tableName, data, callback } = payload;\n\t\tconst keyPathName = this.getKeyPathByMap();\n\t\treturn await this._insertUpdate(tableName, keyPathName, data, callback).catch(this.throwNewError('insertUpdate->_insertUpdate tableName:' + tableName));\n\t}\n\t//private\n\tasync bulkInsertUpdate(tableName, keyPathName, data, callback) {\n\t\tfor (let recoord of data) {\n\t\t\tawait this._insertUpdate(tableName, keyPathName, record, callback);\n\t\t}\n\t}\n\t//----------------------------------------------------------------\n\t//private\n\tasync _bulkInsertUpdate(tableName, keyPathName, data, callback) {\n\t\tconst dataList = [];\n\t\tconst keys = [];\n\t\tfor (let recoord of data) {\n\t\t\tconst key = recoord[keyPathName];\n\t\t\tdataList.push({ key, data: record });\n\t\t\tkeys.push(key);\n\t\t}\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_insertUpdate->getOpenDB tableName:' + tableName));\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\tconst objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\tconst dataMap = await this._selectByKeysOnTranExec(objectStore, keys, tableName);\n\t\tawait this._bulkUpdateExecute(objectStore, tableName, dataList, dataMap);\n\t\tawait this._bulkInsertExecute(objectStore, tableName, dataList, dataMap);\n\t\tif (typeof callback === 'function') {\n\t\t\tcallback();\n\t\t}\n\t}\n\t_bulkInsertExecute(objectStore, tableName, dataList, dataMap) {\n\t\tconst promises = [];\n\t\tfor (const { key, data } of dataList) {\n\t\t\tif (dataMap[key]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst promise = this._bulkInsertExecuteOne(objectStore, key, data);\n\t\t\tpromises.push(promise);\n\t\t}\n\t\treturn Promise.all(promises);\n\t}\n\t_bulkInsertExecuteOne(objectStore, key, data) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet objectStoreRequest = objectStore.add(data); //,keyPath\n\t\t\tobjectStoreRequest.onsuccess = event => {\n\t\t\t\tresolve({ data, key });\n\t\t\t};\n\t\t\tobjectStoreRequest.onerror = e => {\n\t\t\t\tconsole.error(e);\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\t_bulkUpdateExecute(objectStore, tableName, dataList, dataMap) {\n\t\tconst promises = [];\n\t\tfor (const { key, data } of dataList) {\n\t\t\tif (!dataMap[key]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst promise = this._bulkUpdateExecuteOne(objectStore, key, data);\n\t\t\tpromises.push(promise);\n\t\t}\n\t\treturn Promise.all(promises);\n\t}\n\t_bulkUpdateExecuteOne(objectStore, key, data) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet objectStoreRequest = objectStore.put(data); //,keyPath\n\t\t\tobjectStoreRequest.onsuccess = event => {\n\t\t\t\tresolve({ data, key });\n\t\t\t};\n\t\t\tobjectStoreRequest.onerror = e => {\n\t\t\t\tconsole.error(e);\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\t//----------------------------------------------------------------\n\t//private\n\tasync _insertUpdate(tableName, keyPathName, data, callback) {\n\t\tconst key = data[keyPathName];\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_insertUpdate->getOpenDB tableName:' + tableName));\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\tconst value = await this._selectByKeyOnTran(db, tableName, key, tables, MODE_RW).catch(this.throwNewError('_insertUpdate->_selectByKeyOnTran tableName:' + tableName + '/MODE_RW'));\n\t\tif (callback) {\n\t\t\tcallback(value, data);\n\t\t}\n\t\tif (value === undefined) {\n\t\t\treturn await this._insertExecute(db, tableName, key, data, tables).catch(this.throwNewError('_insertUpdate->_insertExecute tableName:' + tableName));\n\t\t} else {\n\t\t\treturn await this._updateExecute(db, tableName, key, data, tables).catch(this.throwNewError('_insertUpdate->_updateExecute tableName:' + tableName));\n\t\t}\n\t}\n\t_insertExecute(db, tableName, key, data, tables) {\n\t\tlet objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet objectStoreRequest = objectStore.add(data); //,keyPath\n\t\t\tobjectStoreRequest.onsuccess = event => {\n\t\t\t\tresolve({ data, key });\n\t\t\t};\n\t\t\tobjectStoreRequest.onerror = e => {\n\t\t\t\tconsole.error(e);\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\t_updateExecute(db, tableName, key, data, tables) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\t\tlet request = objectStore.put(data); //,keyPathValue\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tresolve({ data, key });\n\t\t\t};\n\t\t\trequest.onerror = e => {\n\t\t\t\tconsole.error(e);\n\t\t\t\tresolve(e);\n\t\t\t};\n\t\t});\n\t}\n\t//public\n\tasync deleteWithRange(payload) {\n\t\tlet { tableName, range, condetions } = payload;\n\t\treturn await this._deleteWithRange(tableName, range, condetions);\n\t}\n\t//Delete\n\tasync _deleteWithRange(tableName, range, condetions) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_deleteWithRange->getOpenDB tableName:' + tableName));\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\treturn await this._deleteWithRangeExecute(db, tableName, range, condetions, tables);\n\t}\n\t_deleteWithRangeExecute(db, tableName, range, condetions, tables) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\t\tlet request = objectStore.openCursor(range);\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tlet cursor = event.target.result;\n\t\t\t\tlet list = [];\n\t\t\t\tif (cursor) {\n\t\t\t\t\tlet value = cursor.value;\n\t\t\t\t\tif (IdbUtil.isMutch(value, condetions)) {\n\t\t\t\t\t\tlet or = objectStore.delete(cursor.key);\n\t\t\t\t\t\tor.onsuccess = event => {\n\t\t\t\t\t\t\tlist.push(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tor.onerror = e => {\n\t\t\t\t\t\t\t//momiee\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(list);\n\t\t\t\t}\n\t\t\t};\n\t\t\trequest.onerror = e => {\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\t//public\n\tasync delete(payload) {\n\t\tlet { tableName, key } = payload;\n\t\treturn await this._delete(tableName, key);\n\t}\n\t//Delete\n\tasync _delete(tableName, keyPathValue) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_delete->getOpenDB tableName:' + tableName));\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\treturn await this._deleteOnTran(db, tableName, keyPathValue, tables);\n\t}\n\t_deleteOnTran(db, tableName, key, tables) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\t\tlet request = objectStore.delete(key + '');\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tresolve({ tableName, key });\n\t\t\t};\n\t\t\trequest.onerror = e => {\n\t\t\t\tconsole.error(e);\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\t//public\n\tasync truncate(payload) {\n\t\tlet { tableName } = payload;\n\t\treturn await this._truncate(tableName);\n\t}\n\t//truncate\n\tasync _truncate(tableName) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('_truncate->getOpenDB tableName:' + tableName));\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\treturn await this._truncateExecute(db, tableName, tables);\n\t}\n\t//truncate\n\t_truncateExecute(db, tableName, tables) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\t\tlet request = objectStore.clear();\n\t\t\trequest.onsuccess = event => {\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\trequest.onerror = e => {\n\t\t\t\treject(e);\n\t\t\t};\n\t\t});\n\t}\n\tasync getObjectStoreNames() {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('getObjectStoreNames->getOpenDB'));\n\t\tconst names = db.objectStoreNames;\n\t\tthis.closeDB();\n\t\treturn names;\n\t}\n\tasync isExistsObjectStore(tableName) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('isExistsObjectStore->getOpenDB tableName:' + tableName));\n\t\tlet isExist = false;\n\t\tfor (let name of db.objectStoreNames) {\n\t\t\tif (name === tableName) {\n\t\t\t\tisExist = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.closeDB();\n\t\treturn isExist;\n\t}\n\tasync createIndex(tableName, keyPath, isMultiEntry) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('getObjectStoreNames->getOpenDB'));\n\t\tconst names = db.objectStoreNames;\n\t\tthis._createIndex(db, tableName, keyPath, isMultiEntry);\n\t\tthis.closeDB();\n\t\treturn names;\n\t}\n\t_createIndex(db, tableName, keyPath, isMultiEntry) {\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\tconst objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\tconst indexName = tableName + '-' + keyPath;\n\t\treturn objectStore.createIndex(indexName, keyPath, { multiEntry: !!isMultiEntry });\n\t}\n\tasync getIndexNames(tableName) {\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('getObjectStoreNames->getOpenDB'));\n\t\tconst objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\tconst names = objectStore.indexNames;\n\t\tthis.closeDB();\n\t\treturn names;\n\t}\n\tasync deleteIndex(tableName) {\n\t\tconst db = await this.getOpenDB().catch(this.throwNewError('getObjectStoreNames->getOpenDB'));\n\t\tconst names = db.objectStoreNames;\n\t\tthis.closeDB();\n\t\treturn names;\n\t}\n\t_deleteIndex(db, tableName) {\n\t\tconst tables = IdbUtil.currentTables(tableName);\n\t\tconst objectStore = this.getObjectStore(db, tableName, tables, MODE_RW);\n\t\tconst indexName = tableName + '-' + keyPath;\n\t\tconst names = objectStore.indexNames;\n\t\tif (names.includes(indexName)) {\n\t\t\treturn objectStore.deleteIndex(indexName);\n\t\t}\n\t\treturn null;\n\t}\n\t//public\n\tasync createStore(payload) {\n\t\tlet { tableName, keyPathName, isAutoIncrement } = payload;\n\t\treturn await this._createStore(tableName, keyPathName, isAutoIncrement);\n\t}\n\t//createStore\n\tasync _createStore(tableName, keyPathName, isAutoIncrement) {\n\t\tconst isExistsObjectStore = await this.isExistsObjectStore();\n\t\tif (isExistsObjectStore === false) {\n\t\t\tconst newVersion = (await this.getCurrentVersion()) + 1;\n\t\t\tconst db = await this.getOpenDB(newVersion).catch(this.throwNewError('_createStore->getOpenDB tableName:' + tableName));\n\t\t\tlet isExist = false;\n\t\t\tfor (let name of db.objectStoreNames) {\n\t\t\t\tif (name === tableName) {\n\t\t\t\t\tisExist = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isExist === false) {\n\t\t\t\tdb.createObjectStore(tableName, { keyPath: keyPathName });\n\t\t\t}\n\t\t\tthis.closeDB();\n\t\t}\n\t}\n\t//public\n\tasync dropStore(payload) {\n\t\tlet { tableName } = payload;\n\t\treturn await this._dropStore(tableName);\n\t}\n\t//DropStore\n\tasync _dropStore(tableName) {\n\t\tconst newVersion = (await this.getCurrentVersion()) + 1;\n\t\tconst db = await this.getOpenDB(newVersion).catch(this.throwNewError('_dropStore->getOpenDB tableName:' + tableName));\n\t\tdb.deleteObjectStore(tableName);\n\t\tthis.closeDB();\n\t\treturn;\n\t}\n}\n","import { IdbUtil } from './idbUtil';\nimport { IndexeddbCore } from './indexeddbCore';\nconst MODE_R = 'readonly';\nconst MODE_RW = 'readwrite';\nconst cmdSelectAll = 'cmdSelectAll';\nconst cmdSelectByKey = 'cmdSelectByKey';\nconst cmdSelectByKeys = 'cmdSelectByKeys';\nconst cmdSelectFirstOne = 'cmdSelectFirstOne';\nconst cmdBulkInsertUpdate = 'cmdBulkInsertUpdate';\nconst cmdInsertUpdate = 'cmdInsertUpdate';\nconst cmdDeleteWithRange = 'cmdDeleteWithRange';\nconst cmdDelete = 'cmdDelete';\nconst cmdTruncate = 'cmdTruncate';\nconst cmdCreateStore = 'cmdCreateStore';\nconst cmdDeleteStore = 'cmdDeleteStore';\nconst cmdCreateIndex = 'cmdCreateIndex';\nconst cmdDeleteIndex = 'cmdDeleteIndex';\nconst cmdGetObjectStoreNames = 'cmdGetObjectStoreNames';\nexport class IndexeddbHelper {\n\tconstructor(dbName) {\n\t\tthis.core = new IndexeddbCore(dbName);\n\t\tthis.queue = [];\n\t\tthis.lastTaskMode = null;\n\t\tthis.lastLockTime = new Date().getTime();\n\t\tthis.counter = 0;\n\t}\n\n\tasync deQueue() {\n\t\t// console.log(\"deQueue1---:this.counter:\" + this.counter);\n\t\tif (this.counter < 1) {\n\t\t\tthis.counter++;\n\t\t\tif (this.counter > 1) {\n\t\t\t\tthis.counter--;\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tawait this.deQueue();\n\t\t\t\t}, 0);\n\t\t\t} else {\n\t\t\t\tawait this.deQueueExec();\n\t\t\t\t// console.log(\"deQueue2:this.queue.length:\" + this.queue.length);\n\t\t\t\tthis.counter--;\n\n\t\t\t\t// console.log(\"deQueue3:this.counter:\" + this.counter);\n\t\t\t\tif (this.counter < 1 && this.queue.length > 0) {\n\t\t\t\t\t// console.log(\"deQueue4:this.counter:\" + this.counter);\n\t\t\t\t\tthis.deQueue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdeQueueExec() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\twhile (this.queue.length > 0) {\n\t\t\t\t// console.log(\"deQueueExec:1\" + \"this.counter:\" + this.counter);\n\t\t\t\tconst promises = [];\n\t\t\t\tconst selectTasks = [];\n\t\t\t\twhile (this.queue.length > 0) {\n\t\t\t\t\t// console.log(\"deQueueExec:2\" + \"this.counter:\" + this.counter);\n\t\t\t\t\tconst task = this.queue.shift();\n\t\t\t\t\tif (task) {\n\t\t\t\t\t\tif (this.lastTaskMode !== task.mode || task.mode === MODE_RW) {\n\t\t\t\t\t\t\t//ここでそのまま発行、そして終わるまで待機\n\t\t\t\t\t\t\tif (promises.length > 0) {\n\t\t\t\t\t\t\t\tPromise.all(promises).then(\n\t\t\t\t\t\t\t\t\tresults => {\n\t\t\t\t\t\t\t\t\t\tfor (let index in results) {\n\t\t\t\t\t\t\t\t\t\t\tconst taskOfRead = selectTasks[index];\n\t\t\t\t\t\t\t\t\t\t\tconst result = results[index];\n\t\t\t\t\t\t\t\t\t\t\ttaskOfRead.resolve(result);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tpromises.splice(0, promises.length);\n\t\t\t\t\t\t\t\t\t\tthis.executUpdateTask(task, resolve);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\terror => {\n\t\t\t\t\t\t\t\t\t\talert(error);\n\t\t\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.executUpdateTask(task, resolve);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//じゃんじゃん流していこう。\n\t\t\t\t\t\t\tconst promise = this.execCmd(task.cmd, task.data);\n\t\t\t\t\t\t\tpromises.push(promise);\n\t\t\t\t\t\t\tselectTasks.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.lastTaskMode = task.mode;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//なんだっけ\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (promises.length > 0) {\n\t\t\t\t\tPromise.all(promises).then(\n\t\t\t\t\t\tresults => {\n\t\t\t\t\t\t\tfor (let index in results) {\n\t\t\t\t\t\t\t\tconst taskOfRead = selectTasks[index];\n\t\t\t\t\t\t\t\tconst result = results[index];\n\t\t\t\t\t\t\t\ttaskOfRead.resolve(result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpromises.splice(0, promises.length);\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror => {\n\t\t\t\t\t\t\talert(error);\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\texecutSelectPromiseAndTask(task, resolve, updateTask) {\n\t\tif (updateTask) {\n\t\t\tthis.executUpdateTask(updateTask, resolve);\n\t\t}\n\t}\n\texecutUpdateTask(task, resolve) {\n\t\tconst promise = this.execCmd(task.cmd, task.data);\n\t\tpromise.then(data => {\n\t\t\ttask.resolve(data);\n\t\t\tresolve(data);\n\t\t});\n\t}\n\tenQueueReadTask(cmd, data) {\n\t\treturn this.enQueueTask(cmd, data, MODE_R);\n\t}\n\tenQueueWriteTask(cmd, data) {\n\t\treturn this.enQueueTask(cmd, data, MODE_RW);\n\t}\n\tenQueueTask(cmd, data, mode) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst task = { cmd, data, resolve, reject, mode };\n\t\t\t// console.log(\"this.enQueueTask1:\" + this.counter);\n\t\t\tthis.queue.push(task);\n\t\t\t// console.log(\"this.enQueueTask2:\" + this.counter);\n\t\t\tthis.deQueue();\n\t\t\t// console.log(\"this.enQueueTask3:\" + this.counter);\n\t\t});\n\t}\n\n\tasync execCmd(cmd, data) {\n\t\t// console.log(\"cmd:\" + cmd + \"/data:\" + data);\n\t\tif (cmdSelectAll === cmd) {\n\t\t\treturn await this.core._selectAll(data.tableName, data.range, data.direction, data.offset, data.limmitCount);\n\t\t}\n\t\tif (cmdSelectByKey === cmd) {\n\t\t\treturn await this.core._selectByKey(data.tableName, data.key);\n\t\t}\n\t\tif (cmdSelectByKeys === cmd) {\n\t\t\treturn await this.core._selectByKeys(data.tableName, data.keys);\n\t\t}\n\t\tif (cmdSelectFirstOne === cmd) {\n\t\t\treturn await this.core._selectFirstOne(data.tableName, data.range, data.direction);\n\t\t}\n\t\tif (cmdBulkInsertUpdate === cmd) {\n\t\t\treturn await this.core._bulkInsertUpdate(data.tableName, data.keyPathName, data.data, data.callback);\n\t\t}\n\t\tif (cmdInsertUpdate === cmd) {\n\t\t\treturn await this.core._insertUpdate(data.tableName, data.keyPathName, data.data, data.callback);\n\t\t}\n\t\tif (cmdDeleteWithRange === cmd) {\n\t\t\treturn await this.core._deleteWithRange(data.tableName, data.range, data.condetions);\n\t\t}\n\t\tif (cmdDelete === cmd) {\n\t\t\treturn await this.core._delete(data.tableName, data.keyPathValue);\n\t\t}\n\t\tif (cmdTruncate === cmd) {\n\t\t\treturn await this.core._truncate(data.tableName);\n\t\t}\n\t\tif (cmdCreateStore === cmd) {\n\t\t\treturn await this.core._createStore(data.tableName, data.keyPathName, data.isAutoIncrement);\n\t\t}\n\t\tif (cmdDeleteStore === cmd) {\n\t\t\treturn await this.core._deleteStore(data.tableName);\n\t\t}\n\t\tif (cmdCreateIndex === cmd) {\n\t\t\treturn await this.core._createIndex(data.tableName, data.keyPathName, data.isMultiColumns);\n\t\t}\n\t\tif (cmdDeleteIndex === cmd) {\n\t\t\treturn await this.core._deleteIndex(data.tableName, data.indexName);\n\t\t}\n\t\tif (cmdGetObjectStoreNames === cmd) {\n\t\t\treturn await this.core.getObjectStoreNames();\n\t\t}\n\t}\n\n\t//Select In-line-Keyで返す。\n\tasync selectAllForwardMatch(tableName, key, direction, offset, limmitCount) {\n\t\tconst nextKey = key.slice(0, -1) + String.fromCharCode(key.slice(-1).charCodeAt() + 1);\n\t\tconst range = IDBKeyRange.bound(str, nextStr, false, true);\n\t\treturn await this.enQueueReadTask(cmdSelectAll, { tableName, range, direction, offset, limmitCount });\n\t}\n\t//Select In-line-Keyで返す。\n\tasync selectAll(tableName, range, direction, offset, limmitCount) {\n\t\treturn await this.enQueueReadTask(cmdSelectAll, { tableName, range, direction, offset, limmitCount });\n\t}\n\t//Select In-line-return promise;Keyで返す。\n\tasync selectByKey(tableName, key) {\n\t\treturn await this.enQueueReadTask(cmdSelectByKey, { tableName, key });\n\t}\n\t//Select In-line-return promise;Keyで返す。\n\tasync selectByKeys(tableName, keys) {\n\t\treturn await this.enQueueReadTask(cmdSelectByKeys, { tableName, keys });\n\t}\n\t//Select FirstOnek\n\tasync selectFirstOne(tableName, range, direction) {\n\t\treturn await this.enQueueReadTask(cmdSelectFirstOne, { tableName, range, direction });\n\t}\n\n\t//private\n\tasync bulkInsertUpdate(tableName, keyPathName, data, callback) {\n\t\treturn await this.enQueueWriteTask(cmdBulkInsertUpdate, { tableName, keyPathName, data, callback });\n\t}\n\n\t//private\n\tasync insertUpdate(tableName, keyPathName, data, callback) {\n\t\treturn await this.enQueueWriteTask(cmdInsertUpdate, { tableName, keyPathName, data, callback });\n\t}\n\t//Delete\n\tasync deleteWithRange(tableName, range, condetions) {\n\t\treturn await this.enQueueWriteTask(cmdDeleteWithRange, { tableName, range, direction });\n\t}\n\t//Delete\n\tasync delete(tableName, keyPathValue) {\n\t\treturn await this.enQueueWriteTask(cmdDelete, { tableName, keyPathValue });\n\t}\n\t//truncate\n\tasync truncate(tableName) {\n\t\treturn await this.enQueueWriteTask(cmdTruncate, { tableName });\n\t}\n\t//truncate\n\tasync createStore(tableName, keyPathName, isAutoIncrement) {\n\t\treturn await this.enQueueWriteTask(cmdCreateStore, { tableName, keyPathName, isAutoIncrement });\n\t}\n\t//truncate\n\tasync deleteStore(tableName) {\n\t\treturn await this.enQueueWriteTask(cmdDeleteStore, { tableName });\n\t}\n\t//truncate\n\tasync creatIndex(tableName, keyPathName, isMultiColumns) {\n\t\treturn await this.enQueueWriteTask(cmdCreateIndex, { tableName, keyPathName, isMultiColumns });\n\t}\n\t//truncate\n\tasync deleteIndex(tableName, indexName) {\n\t\treturn await this.enQueueWriteTask(cmdDeleteIndex, { tableName, indexName });\n\t}\n\tasync getObjectStoreNames() {\n\t\treturn await this.enQueueReadTask(cmdGetObjectStoreNames, {});\n\t}\n}\n","import constant from './constant';\nimport { IndexeddbHelper } from './indexeddbHelper';\nconst initQueue = [];\nlet dbName = constant.dbName;\n// stock par db\nconst idbHelperMap = new Map();\nexport class IndexeddbAccessor {\n\tconstructor(objectStoreName, keypathName = constant.keypathName, isAutoincrements = false, currentDbName = dbName) {\n\t\tif (!idbHelperMap.has(currentDbName)) {\n\t\t\tthis.idbh = new IndexeddbHelper(currentDbName);\n\t\t\tidbHelperMap.set(currentDbName, this.idbh);\n\t\t} else {\n\t\t\tthis.idbh = idbHelperMap.get(currentDbName);\n\t\t}\n\t\tthis.keyPathName = keypathName;\n\t\tthis.objectStoreName = objectStoreName;\n\t\tthis.isAutoincrements = isAutoincrements;\n\t}\n\tstatic setDbName(dbNameNew) {\n\t\tdbName = dbNameNew;\n\t}\n\tstatic async getInstance(objectStoreName, keypathNamee, isAutoincrements, currentDbName) {\n\t\tconst inst = new IndexeddbAccessor(objectStoreName, keypathNamee, isAutoincrements, currentDbName);\n\t\tawait inst.init();\n\t\treturn inst;\n\t}\n\tinit() {\n\t\treturn new Promise((reslve, reject) => {\n\t\t\tthis.idbh.createStore(this.objectStoreName, this.keyPathName, this.isAutoincrements).then(\n\t\t\t\t() => {\n\t\t\t\t\treslve(true);\n\t\t\t\t},\n\t\t\t\te => {\n\t\t\t\t\treject(e);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\tasync putByMap(dataMap, callback) {\n\t\tconst record = {\n\t\t\tdata: data\n\t\t};\n\t\trecord[this.keyPathName] = key;\n\t\t//console.log(\"saveDataDefault 001:\" + key + \"/\" + data);\n\t\tawait this.putRecord(record, undefined, callback);\n\t\t//console.log(\"saveDataDefault 002:\" + key + \"/\" + data);\n\t}\n\tasync put(key, data, callback) {\n\t\tconst record = {\n\t\t\tdata: data\n\t\t};\n\t\trecord[this.keyPathName] = key;\n\t\t//console.log(\"saveDataDefault 001:\" + key + \"/\" + data);\n\t\tawait this.putRecord(record, undefined, callback);\n\t\t//console.log(\"saveDataDefault 002:\" + key + \"/\" + data);\n\t}\n\tasync putRecord(record, key, callback) {\n\t\t//console.log(\"saveData 001:\" + key + \"/\" + JSON.stringify(dataObj)+\"/dataObj.data:\"+dataObj.data);\n\t\tconst storeData = record;\n\t\t//console.log(\"saveData 002:\" + key + \"/\" + dataObj[this.keyPathName]);\n\t\tif (record[this.keyPathName] === undefined) {\n\t\t\tstoreData = {\n\t\t\t\tdata: record\n\t\t\t};\n\t\t\tstoreData[this.keyPathName] = key;\n\t\t} else if (key !== undefined) {\n\t\t}\n\t\t//console.log(\"saveData 003:\" + key + \"/\" + dataObj +\"/this.objectStoreName:\"+this.objectStoreName);\n\t\tconst value = await this.idbh.insertUpdate(this.objectStoreName, this.keyPathName, storeData, callback);\n\t\t//console.log(\"saveData 004:\" + key + \"/\" + dataObj+\"/\"+JSON.stringify(value)+\"/\"+value.data.data);\n\t\treturn value;\n\t}\n\tasync getAsMap(keys) {\n\t\tif (keys !== undefined) {\n\t\t\tconst recordAsLoadedData = await this.idbh.selectByKeys(this.objectStoreName, keys);\n\t\t\treturn recordAsLoadedData;\n\t\t}\n\t\treturn null;\n\t}\n\tasync getRecord(key) {\n\t\tif (key !== undefined) {\n\t\t\tconst recordAsLoadedData = await this.idbh.selectByKey(this.objectStoreName, key);\n\t\t\treturn recordAsLoadedData;\n\t\t}\n\t\treturn null;\n\t}\n\tasync get(key) {\n\t\tconst recordAsDefaultLoad = await this.getRecord(key);\n\t\treturn recordAsDefaultLoad === undefined || recordAsDefaultLoad === null ? null : recordAsDefaultLoad.data;\n\t}\n\tasync getAll() {\n\t\treturn await this.idbh.selectAll(this.objectStoreName);\n\t}\n\tasync delete(key) {\n\t\tif (key !== undefined) {\n\t\t\treturn await this.idbh.delete(this.objectStoreName, key);\n\t\t}\n\t\treturn null;\n\t}\n\tasync getOsNames() {\n\t\treturn await this.idbh.getObjectStoreNames();\n\t}\n}\n","import { IndexeddbAccessor } from './indexeddbAccessor';\nimport constant from './constant';\nconst idbAccessors = new Map();\nlet currentDbName = constant.dbName;\nexport class idbw {\n\tconstructor(dbName) {\n\t\tthis.dbName = dbName;\n\t\t// not use\n\t}\n\tasync getObAccessor(obName, keyPathName) {\n\t\tif (idbAccessors.has(obName)) {\n\t\t\treturn idbAccessors.get(obName);\n\t\t}\n\t\tconst accessor = new IndexeddbAccessor(obName, keyPathName, this.dbName);\n\t\tidbAccessors.set(obName, accessor);\n\t\tawait accessor.init();\n\t\treturn accessor;\n\t}\n}\n","export class TestUtil {\n\tconstructor(msg) {\n\t\tthis.frame = document.createElement('div');\n\t\tconst titleRow = document.createElement('div');\n\t\tconst title = document.createElement('h1');\n\t\tconst hr = document.createElement('hr');\n\t\ttitle.textContent = msg;\n\t\ttitleRow.appendChild(title);\n\t\tthis.frame.appendChild(titleRow);\n\t\tthis.frame.appendChild(hr);\n\t\tthis.currentFrame = document.createElement('div');\n\t\tthis.frame.appendChild(this.currentFrame);\n\t\tthis.time = Date.now();\n\t}\n\tcreateNewFrame() {\n\t\tconst hr = document.createElement('hr');\n\t\tthis.frame.appendChild(hr);\n\t\tthis.currentFrame = document.createElement('div');\n\t\tthis.frame.appendChild(this.currentFrame);\n\t}\n\tsetTitle(titleText) {\n\t\tconst title = document.createElement('h2');\n\t\tconst hr = document.createElement('hr');\n\t\ttitle.textContent = titleText;\n\t\tthis.currentFrame.appendChild(title);\n\t\tthis.currentFrame.appendChild(hr);\n\t}\n\tlog(level, time, msg) {\n\t\tconst row = document.createElement('div');\n\t\trow.textContent = time + ' ' + level + ' ' + msg;\n\t\tthis.currentFrame.appendChild(row);\n\t}\n\tgetDuration() {\n\t\tconst time = Date.now();\n\t\tconst duration = time - this.time;\n\t\tthis.time + time;\n\t\treturn time + '/' + (\"00000000000\" + duration)\n\t\t\t.substring(-10);\n\t}\n\tinfo(msg) {\n\t\tthis.log(\"[INFO]\", this.getDuration(), msg);\n\t}\n\twarn(msg) {\n\t\tthis.log(\"[WARN]\", this.getDuration(), msg);\n\t}\n\terror(msg) {\n\t\tthis.log(\"[ERROR]\", this.getDuration(), msg);\n\t}\n}","import { idbw } from './src/indexeddbWrapper'\nimport { indexeddbWrapperTest } from './test/test'\nexport const indexedbwrapper = idbw;\nexport const db = idbw;\nexport const test = indexeddbWrapperTest;","import { idbw } from '../src/indexeddbWrapper';\nimport { TestUtil } from './testUtil';\nexport class indexeddbWrapperTest {\n\tconstructor() {\n\t\tthis.db = new idbw('indexeddbWrapper-test');\n\t\tthis.logger = new TestUtil('idbw test!');\n\t}\n\texecAll() {\n\t\talert('test!');\n\t}\n\t//test-----------------------------------------------\n\t//createDB\n\t//creatTable\n\t//bulkInsertUpdate\n\t//select\n\t//_updateExecute\n\t//delete\n\ttest1() {\n\t\tconst ac = this.db.getObAccessor('test', 'pk');\n\t}\n\tasync test2() {\n\t\tconst ac = this.db.getObAccessor('test', 'pk');\n\t}\n}\n"],"sourceRoot":""}